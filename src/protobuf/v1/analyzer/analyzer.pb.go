// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: v1/analyzer/analyzer.proto

package analyzer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NwLog []*KnoxNetworkLog `protobuf:"bytes,1,rep,name=NwLog,proto3" json:"NwLog,omitempty"`
}

func (x *NetworkLogs) Reset() {
	*x = NetworkLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLogs) ProtoMessage() {}

func (x *NetworkLogs) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLogs.ProtoReflect.Descriptor instead.
func (*NetworkLogs) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkLogs) GetNwLog() []*KnoxNetworkLog {
	if x != nil {
		return x.NwLog
	}
	return nil
}

type NetworkPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NwPolicies []*KnoxNetworkPolicy `protobuf:"bytes,1,rep,name=NwPolicies,proto3" json:"NwPolicies,omitempty"`
}

func (x *NetworkPolicies) Reset() {
	*x = NetworkPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicies) ProtoMessage() {}

func (x *NetworkPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicies.ProtoReflect.Descriptor instead.
func (*NetworkPolicies) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkPolicies) GetNwPolicies() []*KnoxNetworkPolicy {
	if x != nil {
		return x.NwPolicies
	}
	return nil
}

type SystemLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysLog []*KnoxSystemLog `protobuf:"bytes,1,rep,name=SysLog,proto3" json:"SysLog,omitempty"`
}

func (x *SystemLogs) Reset() {
	*x = SystemLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogs) ProtoMessage() {}

func (x *SystemLogs) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogs.ProtoReflect.Descriptor instead.
func (*SystemLogs) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{2}
}

func (x *SystemLogs) GetSysLog() []*KnoxSystemLog {
	if x != nil {
		return x.SysLog
	}
	return nil
}

type SystemPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysPolicies []*KnoxSystemPolicy `protobuf:"bytes,1,rep,name=SysPolicies,proto3" json:"SysPolicies,omitempty"`
}

func (x *SystemPolicies) Reset() {
	*x = SystemPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPolicies) ProtoMessage() {}

func (x *SystemPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPolicies.ProtoReflect.Descriptor instead.
func (*SystemPolicies) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{3}
}

func (x *SystemPolicies) GetSysPolicies() []*KnoxSystemPolicy {
	if x != nil {
		return x.SysPolicies
	}
	return nil
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{4}
}

func (x *Selector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

type KnoxSystemPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APIVersion    string            `protobuf:"bytes,1,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	Kind          string            `protobuf:"bytes,2,opt,name=Kind,proto3" json:"Kind,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outdated      string            `protobuf:"bytes,4,opt,name=Outdated,proto3" json:"Outdated,omitempty"`
	SysSpec       *KnoxSystemSpec   `protobuf:"bytes,5,opt,name=SysSpec,proto3" json:"SysSpec,omitempty"`
	GeneratedTime int64             `protobuf:"varint,6,opt,name=GeneratedTime,proto3" json:"GeneratedTime,omitempty"`
}

func (x *KnoxSystemPolicy) Reset() {
	*x = KnoxSystemPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxSystemPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxSystemPolicy) ProtoMessage() {}

func (x *KnoxSystemPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxSystemPolicy.ProtoReflect.Descriptor instead.
func (*KnoxSystemPolicy) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{5}
}

func (x *KnoxSystemPolicy) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *KnoxSystemPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KnoxSystemPolicy) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KnoxSystemPolicy) GetOutdated() string {
	if x != nil {
		return x.Outdated
	}
	return ""
}

func (x *KnoxSystemPolicy) GetSysSpec() *KnoxSystemSpec {
	if x != nil {
		return x.SysSpec
	}
	return nil
}

func (x *KnoxSystemPolicy) GetGeneratedTime() int64 {
	if x != nil {
		return x.GeneratedTime
	}
	return 0
}

type KnoxSystemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity       int32                 `protobuf:"varint,1,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Tags           []string              `protobuf:"bytes,2,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Message        string                `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	SystemSelector *Selector             `protobuf:"bytes,4,opt,name=SystemSelector,proto3" json:"SystemSelector,omitempty"`
	Process        *KnoxSys              `protobuf:"bytes,5,opt,name=Process,proto3" json:"Process,omitempty"`
	File           *KnoxSys              `protobuf:"bytes,6,opt,name=File,proto3" json:"File,omitempty"`
	Network        []*KnoxMatchProtocols `protobuf:"bytes,7,rep,name=Network,proto3" json:"Network,omitempty"`
	Action         string                `protobuf:"bytes,8,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *KnoxSystemSpec) Reset() {
	*x = KnoxSystemSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxSystemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxSystemSpec) ProtoMessage() {}

func (x *KnoxSystemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxSystemSpec.ProtoReflect.Descriptor instead.
func (*KnoxSystemSpec) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{6}
}

func (x *KnoxSystemSpec) GetSeverity() int32 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *KnoxSystemSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KnoxSystemSpec) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KnoxSystemSpec) GetSystemSelector() *Selector {
	if x != nil {
		return x.SystemSelector
	}
	return nil
}

func (x *KnoxSystemSpec) GetProcess() *KnoxSys {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *KnoxSystemSpec) GetFile() *KnoxSys {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *KnoxSystemSpec) GetNetwork() []*KnoxMatchProtocols {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *KnoxSystemSpec) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type KnoxSys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchPaths       []*KnoxMatchPaths       `protobuf:"bytes,1,rep,name=MatchPaths,proto3" json:"MatchPaths,omitempty"`
	MatchDirectories []*KnoxMatchDirectories `protobuf:"bytes,2,rep,name=MatchDirectories,proto3" json:"MatchDirectories,omitempty"`
}

func (x *KnoxSys) Reset() {
	*x = KnoxSys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxSys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxSys) ProtoMessage() {}

func (x *KnoxSys) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxSys.ProtoReflect.Descriptor instead.
func (*KnoxSys) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{7}
}

func (x *KnoxSys) GetMatchPaths() []*KnoxMatchPaths {
	if x != nil {
		return x.MatchPaths
	}
	return nil
}

func (x *KnoxSys) GetMatchDirectories() []*KnoxMatchDirectories {
	if x != nil {
		return x.MatchDirectories
	}
	return nil
}

type KnoxMatchProtocols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol   string            `protobuf:"bytes,1,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	FromSource []*KnoxFromSource `protobuf:"bytes,2,rep,name=FromSource,proto3" json:"FromSource,omitempty"`
}

func (x *KnoxMatchProtocols) Reset() {
	*x = KnoxMatchProtocols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxMatchProtocols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxMatchProtocols) ProtoMessage() {}

func (x *KnoxMatchProtocols) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxMatchProtocols.ProtoReflect.Descriptor instead.
func (*KnoxMatchProtocols) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{8}
}

func (x *KnoxMatchProtocols) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *KnoxMatchProtocols) GetFromSource() []*KnoxFromSource {
	if x != nil {
		return x.FromSource
	}
	return nil
}

type KnoxMatchPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string            `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	ReadOnly   bool              `protobuf:"varint,2,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	OwnerOnly  bool              `protobuf:"varint,3,opt,name=OwnerOnly,proto3" json:"OwnerOnly,omitempty"`
	FromSource []*KnoxFromSource `protobuf:"bytes,4,rep,name=FromSource,proto3" json:"FromSource,omitempty"`
}

func (x *KnoxMatchPaths) Reset() {
	*x = KnoxMatchPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxMatchPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxMatchPaths) ProtoMessage() {}

func (x *KnoxMatchPaths) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxMatchPaths.ProtoReflect.Descriptor instead.
func (*KnoxMatchPaths) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{9}
}

func (x *KnoxMatchPaths) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KnoxMatchPaths) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *KnoxMatchPaths) GetOwnerOnly() bool {
	if x != nil {
		return x.OwnerOnly
	}
	return false
}

func (x *KnoxMatchPaths) GetFromSource() []*KnoxFromSource {
	if x != nil {
		return x.FromSource
	}
	return nil
}

type KnoxMatchDirectories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir        string            `protobuf:"bytes,1,opt,name=Dir,proto3" json:"Dir,omitempty"`
	ReadOnly   bool              `protobuf:"varint,2,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	OwnerOnly  bool              `protobuf:"varint,3,opt,name=OwnerOnly,proto3" json:"OwnerOnly,omitempty"`
	FromSource []*KnoxFromSource `protobuf:"bytes,4,rep,name=FromSource,proto3" json:"FromSource,omitempty"`
}

func (x *KnoxMatchDirectories) Reset() {
	*x = KnoxMatchDirectories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxMatchDirectories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxMatchDirectories) ProtoMessage() {}

func (x *KnoxMatchDirectories) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxMatchDirectories.ProtoReflect.Descriptor instead.
func (*KnoxMatchDirectories) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{10}
}

func (x *KnoxMatchDirectories) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *KnoxMatchDirectories) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *KnoxMatchDirectories) GetOwnerOnly() bool {
	if x != nil {
		return x.OwnerOnly
	}
	return false
}

func (x *KnoxMatchDirectories) GetFromSource() []*KnoxFromSource {
	if x != nil {
		return x.FromSource
	}
	return nil
}

type KnoxFromSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Dir       string `protobuf:"bytes,2,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Recursive bool   `protobuf:"varint,3,opt,name=Recursive,proto3" json:"Recursive,omitempty"`
}

func (x *KnoxFromSource) Reset() {
	*x = KnoxFromSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxFromSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxFromSource) ProtoMessage() {}

func (x *KnoxFromSource) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxFromSource.ProtoReflect.Descriptor instead.
func (*KnoxFromSource) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{11}
}

func (x *KnoxFromSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KnoxFromSource) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *KnoxFromSource) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type KnoxNetworkPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APIVersion    string            `protobuf:"bytes,1,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	Kind          string            `protobuf:"bytes,2,opt,name=Kind,proto3" json:"Kind,omitempty"`
	FlowIDs       []int32           `protobuf:"varint,3,rep,packed,name=FlowIDs,proto3" json:"FlowIDs,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,4,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outdated      string            `protobuf:"bytes,5,opt,name=Outdated,proto3" json:"Outdated,omitempty"`
	NetSpec       *KnoxNetworkSpec  `protobuf:"bytes,6,opt,name=NetSpec,proto3" json:"NetSpec,omitempty"`
	GeneratedTime int64             `protobuf:"varint,7,opt,name=GeneratedTime,proto3" json:"GeneratedTime,omitempty"`
}

func (x *KnoxNetworkPolicy) Reset() {
	*x = KnoxNetworkPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxNetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxNetworkPolicy) ProtoMessage() {}

func (x *KnoxNetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxNetworkPolicy.ProtoReflect.Descriptor instead.
func (*KnoxNetworkPolicy) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{12}
}

func (x *KnoxNetworkPolicy) GetAPIVersion() string {
	if x != nil {
		return x.APIVersion
	}
	return ""
}

func (x *KnoxNetworkPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KnoxNetworkPolicy) GetFlowIDs() []int32 {
	if x != nil {
		return x.FlowIDs
	}
	return nil
}

func (x *KnoxNetworkPolicy) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KnoxNetworkPolicy) GetOutdated() string {
	if x != nil {
		return x.Outdated
	}
	return ""
}

func (x *KnoxNetworkPolicy) GetNetSpec() *KnoxNetworkSpec {
	if x != nil {
		return x.NetSpec
	}
	return nil
}

func (x *KnoxNetworkPolicy) GetGeneratedTime() int64 {
	if x != nil {
		return x.GeneratedTime
	}
	return 0
}

type KnoxNetworkSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkSelector *Selector  `protobuf:"bytes,1,opt,name=NetworkSelector,proto3" json:"NetworkSelector,omitempty"`
	Egressess       []*Egress  `protobuf:"bytes,2,rep,name=Egressess,proto3" json:"Egressess,omitempty"`
	Ingressess      []*Ingress `protobuf:"bytes,3,rep,name=Ingressess,proto3" json:"Ingressess,omitempty"`
	Action          string     `protobuf:"bytes,4,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *KnoxNetworkSpec) Reset() {
	*x = KnoxNetworkSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxNetworkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxNetworkSpec) ProtoMessage() {}

func (x *KnoxNetworkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxNetworkSpec.ProtoReflect.Descriptor instead.
func (*KnoxNetworkSpec) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{13}
}

func (x *KnoxNetworkSpec) GetNetworkSelector() *Selector {
	if x != nil {
		return x.NetworkSelector
	}
	return nil
}

func (x *KnoxNetworkSpec) GetEgressess() []*Egress {
	if x != nil {
		return x.Egressess
	}
	return nil
}

func (x *KnoxNetworkSpec) GetIngressess() []*Ingress {
	if x != nil {
		return x.Ingressess
	}
	return nil
}

func (x *KnoxNetworkSpec) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type Egress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToPorts     []*SpecPort       `protobuf:"bytes,2,rep,name=ToPorts,proto3" json:"ToPorts,omitempty"`
	ToCIDRs     []*SpecCIDR       `protobuf:"bytes,3,rep,name=ToCIDRs,proto3" json:"ToCIDRs,omitempty"`
	ToEndtities []string          `protobuf:"bytes,4,rep,name=ToEndtities,proto3" json:"ToEndtities,omitempty"`
	ToServices  []*SpecService    `protobuf:"bytes,5,rep,name=ToServices,proto3" json:"ToServices,omitempty"`
	ToFQDNs     []*SpecFQDN       `protobuf:"bytes,6,rep,name=ToFQDNs,proto3" json:"ToFQDNs,omitempty"`
	ToHTTPs     []*SpecHTTP       `protobuf:"bytes,7,rep,name=ToHTTPs,proto3" json:"ToHTTPs,omitempty"`
}

func (x *Egress) Reset() {
	*x = Egress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Egress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Egress) ProtoMessage() {}

func (x *Egress) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Egress.ProtoReflect.Descriptor instead.
func (*Egress) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{14}
}

func (x *Egress) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *Egress) GetToPorts() []*SpecPort {
	if x != nil {
		return x.ToPorts
	}
	return nil
}

func (x *Egress) GetToCIDRs() []*SpecCIDR {
	if x != nil {
		return x.ToCIDRs
	}
	return nil
}

func (x *Egress) GetToEndtities() []string {
	if x != nil {
		return x.ToEndtities
	}
	return nil
}

func (x *Egress) GetToServices() []*SpecService {
	if x != nil {
		return x.ToServices
	}
	return nil
}

func (x *Egress) GetToFQDNs() []*SpecFQDN {
	if x != nil {
		return x.ToFQDNs
	}
	return nil
}

func (x *Egress) GetToHTTPs() []*SpecHTTP {
	if x != nil {
		return x.ToHTTPs
	}
	return nil
}

type SpecPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     string `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
}

func (x *SpecPort) Reset() {
	*x = SpecPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecPort) ProtoMessage() {}

func (x *SpecPort) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecPort.ProtoReflect.Descriptor instead.
func (*SpecPort) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{15}
}

func (x *SpecPort) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SpecPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type SpecCIDR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CIDRs  []string `protobuf:"bytes,1,rep,name=CIDRs,proto3" json:"CIDRs,omitempty"`
	Except []string `protobuf:"bytes,2,rep,name=Except,proto3" json:"Except,omitempty"`
}

func (x *SpecCIDR) Reset() {
	*x = SpecCIDR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecCIDR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecCIDR) ProtoMessage() {}

func (x *SpecCIDR) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecCIDR.ProtoReflect.Descriptor instead.
func (*SpecCIDR) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{16}
}

func (x *SpecCIDR) GetCIDRs() []string {
	if x != nil {
		return x.CIDRs
	}
	return nil
}

func (x *SpecCIDR) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

type SpecService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *SpecService) Reset() {
	*x = SpecService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecService) ProtoMessage() {}

func (x *SpecService) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecService.ProtoReflect.Descriptor instead.
func (*SpecService) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{17}
}

func (x *SpecService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpecService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type SpecFQDN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchNames []string `protobuf:"bytes,1,rep,name=MatchNames,proto3" json:"MatchNames,omitempty"`
}

func (x *SpecFQDN) Reset() {
	*x = SpecFQDN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecFQDN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecFQDN) ProtoMessage() {}

func (x *SpecFQDN) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecFQDN.ProtoReflect.Descriptor instead.
func (*SpecFQDN) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{18}
}

func (x *SpecFQDN) GetMatchNames() []string {
	if x != nil {
		return x.MatchNames
	}
	return nil
}

type SpecHTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method     string `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Aggregated bool   `protobuf:"varint,3,opt,name=Aggregated,proto3" json:"Aggregated,omitempty"`
}

func (x *SpecHTTP) Reset() {
	*x = SpecHTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecHTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecHTTP) ProtoMessage() {}

func (x *SpecHTTP) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecHTTP.ProtoReflect.Descriptor instead.
func (*SpecHTTP) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{19}
}

func (x *SpecHTTP) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SpecHTTP) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SpecHTTP) GetAggregated() bool {
	if x != nil {
		return x.Aggregated
	}
	return false
}

type Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels  map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToPorts      []*SpecPort       `protobuf:"bytes,2,rep,name=ToPorts,proto3" json:"ToPorts,omitempty"`
	ToHTTPs      []*SpecHTTP       `protobuf:"bytes,3,rep,name=ToHTTPs,proto3" json:"ToHTTPs,omitempty"`
	FromCIDRs    []*SpecCIDR       `protobuf:"bytes,4,rep,name=FromCIDRs,proto3" json:"FromCIDRs,omitempty"`
	FromEntities []string          `protobuf:"bytes,5,rep,name=FromEntities,proto3" json:"FromEntities,omitempty"`
}

func (x *Ingress) Reset() {
	*x = Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingress) ProtoMessage() {}

func (x *Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingress.ProtoReflect.Descriptor instead.
func (*Ingress) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{20}
}

func (x *Ingress) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *Ingress) GetToPorts() []*SpecPort {
	if x != nil {
		return x.ToPorts
	}
	return nil
}

func (x *Ingress) GetToHTTPs() []*SpecHTTP {
	if x != nil {
		return x.ToHTTPs
	}
	return nil
}

func (x *Ingress) GetFromCIDRs() []*SpecCIDR {
	if x != nil {
		return x.FromCIDRs
	}
	return nil
}

func (x *Ingress) GetFromEntities() []string {
	if x != nil {
		return x.FromEntities
	}
	return nil
}

type KnoxNetworkLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowID       int32    `protobuf:"varint,1,opt,name=FlowID,proto3" json:"FlowID,omitempty"`
	ClusterName  string   `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	SrcNamespace string   `protobuf:"bytes,3,opt,name=SrcNamespace,proto3" json:"SrcNamespace,omitempty"`
	SrcPodName   string   `protobuf:"bytes,4,opt,name=SrcPodName,proto3" json:"SrcPodName,omitempty"`
	DstNamespace string   `protobuf:"bytes,5,opt,name=DstNamespace,proto3" json:"DstNamespace,omitempty"`
	DstPodName   string   `protobuf:"bytes,6,opt,name=DstPodName,proto3" json:"DstPodName,omitempty"`
	EtherType    int32    `protobuf:"varint,7,opt,name=EtherType,proto3" json:"EtherType,omitempty"`
	Protocol     int32    `protobuf:"varint,8,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	SrcIP        string   `protobuf:"bytes,9,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP        string   `protobuf:"bytes,10,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcPort      int32    `protobuf:"varint,11,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort      int32    `protobuf:"varint,12,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	SynFlag      bool     `protobuf:"varint,13,opt,name=SynFlag,proto3" json:"SynFlag,omitempty"`
	IsReply      bool     `protobuf:"varint,14,opt,name=IsReply,proto3" json:"IsReply,omitempty"`
	DNSQuery     string   `protobuf:"bytes,15,opt,name=DNSQuery,proto3" json:"DNSQuery,omitempty"`
	DNSRes       string   `protobuf:"bytes,16,opt,name=DNSRes,proto3" json:"DNSRes,omitempty"`
	DNSResIPs    []string `protobuf:"bytes,17,rep,name=DNSResIPs,proto3" json:"DNSResIPs,omitempty"`
	HTTPMethod   string   `protobuf:"bytes,18,opt,name=HTTPMethod,proto3" json:"HTTPMethod,omitempty"`
	HTTPPath     string   `protobuf:"bytes,19,opt,name=HTTPPath,proto3" json:"HTTPPath,omitempty"`
	Direction    string   `protobuf:"bytes,20,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Action       string   `protobuf:"bytes,21,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *KnoxNetworkLog) Reset() {
	*x = KnoxNetworkLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxNetworkLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxNetworkLog) ProtoMessage() {}

func (x *KnoxNetworkLog) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxNetworkLog.ProtoReflect.Descriptor instead.
func (*KnoxNetworkLog) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{21}
}

func (x *KnoxNetworkLog) GetFlowID() int32 {
	if x != nil {
		return x.FlowID
	}
	return 0
}

func (x *KnoxNetworkLog) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *KnoxNetworkLog) GetSrcNamespace() string {
	if x != nil {
		return x.SrcNamespace
	}
	return ""
}

func (x *KnoxNetworkLog) GetSrcPodName() string {
	if x != nil {
		return x.SrcPodName
	}
	return ""
}

func (x *KnoxNetworkLog) GetDstNamespace() string {
	if x != nil {
		return x.DstNamespace
	}
	return ""
}

func (x *KnoxNetworkLog) GetDstPodName() string {
	if x != nil {
		return x.DstPodName
	}
	return ""
}

func (x *KnoxNetworkLog) GetEtherType() int32 {
	if x != nil {
		return x.EtherType
	}
	return 0
}

func (x *KnoxNetworkLog) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *KnoxNetworkLog) GetSrcIP() string {
	if x != nil {
		return x.SrcIP
	}
	return ""
}

func (x *KnoxNetworkLog) GetDstIP() string {
	if x != nil {
		return x.DstIP
	}
	return ""
}

func (x *KnoxNetworkLog) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *KnoxNetworkLog) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *KnoxNetworkLog) GetSynFlag() bool {
	if x != nil {
		return x.SynFlag
	}
	return false
}

func (x *KnoxNetworkLog) GetIsReply() bool {
	if x != nil {
		return x.IsReply
	}
	return false
}

func (x *KnoxNetworkLog) GetDNSQuery() string {
	if x != nil {
		return x.DNSQuery
	}
	return ""
}

func (x *KnoxNetworkLog) GetDNSRes() string {
	if x != nil {
		return x.DNSRes
	}
	return ""
}

func (x *KnoxNetworkLog) GetDNSResIPs() []string {
	if x != nil {
		return x.DNSResIPs
	}
	return nil
}

func (x *KnoxNetworkLog) GetHTTPMethod() string {
	if x != nil {
		return x.HTTPMethod
	}
	return ""
}

func (x *KnoxNetworkLog) GetHTTPPath() string {
	if x != nil {
		return x.HTTPPath
	}
	return ""
}

func (x *KnoxNetworkLog) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *KnoxNetworkLog) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type KnoxSystemLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogID          int32  `protobuf:"varint,1,opt,name=LogID,proto3" json:"LogID,omitempty"`
	ClusterName    string `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	HostName       string `protobuf:"bytes,3,opt,name=HostName,proto3" json:"HostName,omitempty"`
	Namespace      string `protobuf:"bytes,4,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	PodName        string `protobuf:"bytes,5,opt,name=PodName,proto3" json:"PodName,omitempty"`
	SourceOrigin   string `protobuf:"bytes,6,opt,name=SourceOrigin,proto3" json:"SourceOrigin,omitempty"`
	Source         string `protobuf:"bytes,7,opt,name=Source,proto3" json:"Source,omitempty"`
	Operation      string `protobuf:"bytes,8,opt,name=Operation,proto3" json:"Operation,omitempty"`
	ResourceOrigin string `protobuf:"bytes,9,opt,name=ResourceOrigin,proto3" json:"ResourceOrigin,omitempty"`
	Resource       string `protobuf:"bytes,10,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Data           string `protobuf:"bytes,11,opt,name=Data,proto3" json:"Data,omitempty"`
	ReadOnly       bool   `protobuf:"varint,12,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	Result         string `protobuf:"bytes,13,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *KnoxSystemLog) Reset() {
	*x = KnoxSystemLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_analyzer_analyzer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnoxSystemLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnoxSystemLog) ProtoMessage() {}

func (x *KnoxSystemLog) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analyzer_analyzer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnoxSystemLog.ProtoReflect.Descriptor instead.
func (*KnoxSystemLog) Descriptor() ([]byte, []int) {
	return file_v1_analyzer_analyzer_proto_rawDescGZIP(), []int{22}
}

func (x *KnoxSystemLog) GetLogID() int32 {
	if x != nil {
		return x.LogID
	}
	return 0
}

func (x *KnoxSystemLog) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *KnoxSystemLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *KnoxSystemLog) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KnoxSystemLog) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *KnoxSystemLog) GetSourceOrigin() string {
	if x != nil {
		return x.SourceOrigin
	}
	return ""
}

func (x *KnoxSystemLog) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *KnoxSystemLog) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *KnoxSystemLog) GetResourceOrigin() string {
	if x != nil {
		return x.ResourceOrigin
	}
	return ""
}

func (x *KnoxSystemLog) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *KnoxSystemLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *KnoxSystemLog) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *KnoxSystemLog) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_v1_analyzer_analyzer_proto protoreflect.FileDescriptor

var file_v1_analyzer_analyzer_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x31,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x4e, 0x77, 0x4c, 0x6f,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x4e, 0x77, 0x4c, 0x6f, 0x67, 0x22, 0x51, 0x0a, 0x0f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x4e, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0a, 0x4e, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x40,
	0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67,
	0x22, 0x51, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x48, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x02, 0x0a, 0x10, 0x4b,
	0x6e, 0x6f, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x53, 0x79, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x24, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e,
	0x6f, 0x78, 0x53, 0x79, 0x73, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x53,
	0x79, 0x73, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x07,
	0x4b, 0x6e, 0x6f, 0x78, 0x53, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f,
	0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x12, 0x4b, 0x6e, 0x6f, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x14, 0x4b, 0x6e, 0x6f, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x11, 0x4b, 0x6e, 0x6f,
	0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f,
	0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01,
	0x0a, 0x0f, 0x4b, 0x6e, 0x6f, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x3f, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x03, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x54, 0x6f, 0x43, 0x49, 0x44,
	0x52, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x49, 0x44, 0x52, 0x52,
	0x07, 0x54, 0x6f, 0x43, 0x49, 0x44, 0x52, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x45, 0x6e,
	0x64, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x6f, 0x45, 0x6e, 0x64, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x54, 0x6f, 0x46, 0x51, 0x44, 0x4e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x46, 0x51, 0x44, 0x4e, 0x52, 0x07, 0x54, 0x6f,
	0x46, 0x51, 0x44, 0x4e, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x54, 0x54, 0x50, 0x52, 0x07, 0x54,
	0x6f, 0x48, 0x54, 0x54, 0x50, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x22, 0x38, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x43, 0x49, 0x44, 0x52, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x49, 0x44, 0x52, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x49, 0x44, 0x52, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x22, 0x4d, 0x0a, 0x0b,
	0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x08, 0x53,
	0x70, 0x65, 0x63, 0x46, 0x51, 0x44, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x54, 0x54, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xcd, 0x02, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x54, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x54, 0x54, 0x50, 0x52, 0x07, 0x54,
	0x6f, 0x48, 0x54, 0x54, 0x50, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x49,
	0x44, 0x52, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x49, 0x44, 0x52,
	0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x49, 0x44, 0x52, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe4, 0x04, 0x0a, 0x0e, 0x4b, 0x6e, 0x6f, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x72, 0x63, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x72, 0x63, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x73, 0x74, 0x49, 0x50, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x73, 0x74, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x79, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x79, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x4e, 0x53, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73,
	0x49, 0x50, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x73, 0x49, 0x50, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x54, 0x54, 0x50, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x03, 0x0a, 0x0d, 0x4b, 0x6e, 0x6f, 0x78, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xa3, 0x01, 0x0a, 0x08, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x63, 0x63, 0x75, 0x6b, 0x6e, 0x6f, 0x78, 0x2f, 0x6b, 0x6e, 0x6f, 0x78, 0x41, 0x75, 0x74, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_analyzer_analyzer_proto_rawDescOnce sync.Once
	file_v1_analyzer_analyzer_proto_rawDescData = file_v1_analyzer_analyzer_proto_rawDesc
)

func file_v1_analyzer_analyzer_proto_rawDescGZIP() []byte {
	file_v1_analyzer_analyzer_proto_rawDescOnce.Do(func() {
		file_v1_analyzer_analyzer_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_analyzer_analyzer_proto_rawDescData)
	})
	return file_v1_analyzer_analyzer_proto_rawDescData
}

var file_v1_analyzer_analyzer_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_v1_analyzer_analyzer_proto_goTypes = []interface{}{
	(*NetworkLogs)(nil),          // 0: v1.analyzer.NetworkLogs
	(*NetworkPolicies)(nil),      // 1: v1.analyzer.NetworkPolicies
	(*SystemLogs)(nil),           // 2: v1.analyzer.SystemLogs
	(*SystemPolicies)(nil),       // 3: v1.analyzer.SystemPolicies
	(*Selector)(nil),             // 4: v1.analyzer.Selector
	(*KnoxSystemPolicy)(nil),     // 5: v1.analyzer.KnoxSystemPolicy
	(*KnoxSystemSpec)(nil),       // 6: v1.analyzer.KnoxSystemSpec
	(*KnoxSys)(nil),              // 7: v1.analyzer.KnoxSys
	(*KnoxMatchProtocols)(nil),   // 8: v1.analyzer.KnoxMatchProtocols
	(*KnoxMatchPaths)(nil),       // 9: v1.analyzer.KnoxMatchPaths
	(*KnoxMatchDirectories)(nil), // 10: v1.analyzer.KnoxMatchDirectories
	(*KnoxFromSource)(nil),       // 11: v1.analyzer.KnoxFromSource
	(*KnoxNetworkPolicy)(nil),    // 12: v1.analyzer.KnoxNetworkPolicy
	(*KnoxNetworkSpec)(nil),      // 13: v1.analyzer.KnoxNetworkSpec
	(*Egress)(nil),               // 14: v1.analyzer.Egress
	(*SpecPort)(nil),             // 15: v1.analyzer.SpecPort
	(*SpecCIDR)(nil),             // 16: v1.analyzer.SpecCIDR
	(*SpecService)(nil),          // 17: v1.analyzer.SpecService
	(*SpecFQDN)(nil),             // 18: v1.analyzer.SpecFQDN
	(*SpecHTTP)(nil),             // 19: v1.analyzer.SpecHTTP
	(*Ingress)(nil),              // 20: v1.analyzer.Ingress
	(*KnoxNetworkLog)(nil),       // 21: v1.analyzer.KnoxNetworkLog
	(*KnoxSystemLog)(nil),        // 22: v1.analyzer.KnoxSystemLog
	nil,                          // 23: v1.analyzer.Selector.MatchLabelsEntry
	nil,                          // 24: v1.analyzer.KnoxSystemPolicy.MetadataEntry
	nil,                          // 25: v1.analyzer.KnoxNetworkPolicy.MetadataEntry
	nil,                          // 26: v1.analyzer.Egress.MatchLabelsEntry
	nil,                          // 27: v1.analyzer.Ingress.MatchLabelsEntry
}
var file_v1_analyzer_analyzer_proto_depIdxs = []int32{
	21, // 0: v1.analyzer.NetworkLogs.NwLog:type_name -> v1.analyzer.KnoxNetworkLog
	12, // 1: v1.analyzer.NetworkPolicies.NwPolicies:type_name -> v1.analyzer.KnoxNetworkPolicy
	22, // 2: v1.analyzer.SystemLogs.SysLog:type_name -> v1.analyzer.KnoxSystemLog
	5,  // 3: v1.analyzer.SystemPolicies.SysPolicies:type_name -> v1.analyzer.KnoxSystemPolicy
	23, // 4: v1.analyzer.Selector.MatchLabels:type_name -> v1.analyzer.Selector.MatchLabelsEntry
	24, // 5: v1.analyzer.KnoxSystemPolicy.Metadata:type_name -> v1.analyzer.KnoxSystemPolicy.MetadataEntry
	6,  // 6: v1.analyzer.KnoxSystemPolicy.SysSpec:type_name -> v1.analyzer.KnoxSystemSpec
	4,  // 7: v1.analyzer.KnoxSystemSpec.SystemSelector:type_name -> v1.analyzer.Selector
	7,  // 8: v1.analyzer.KnoxSystemSpec.Process:type_name -> v1.analyzer.KnoxSys
	7,  // 9: v1.analyzer.KnoxSystemSpec.File:type_name -> v1.analyzer.KnoxSys
	8,  // 10: v1.analyzer.KnoxSystemSpec.Network:type_name -> v1.analyzer.KnoxMatchProtocols
	9,  // 11: v1.analyzer.KnoxSys.MatchPaths:type_name -> v1.analyzer.KnoxMatchPaths
	10, // 12: v1.analyzer.KnoxSys.MatchDirectories:type_name -> v1.analyzer.KnoxMatchDirectories
	11, // 13: v1.analyzer.KnoxMatchProtocols.FromSource:type_name -> v1.analyzer.KnoxFromSource
	11, // 14: v1.analyzer.KnoxMatchPaths.FromSource:type_name -> v1.analyzer.KnoxFromSource
	11, // 15: v1.analyzer.KnoxMatchDirectories.FromSource:type_name -> v1.analyzer.KnoxFromSource
	25, // 16: v1.analyzer.KnoxNetworkPolicy.Metadata:type_name -> v1.analyzer.KnoxNetworkPolicy.MetadataEntry
	13, // 17: v1.analyzer.KnoxNetworkPolicy.NetSpec:type_name -> v1.analyzer.KnoxNetworkSpec
	4,  // 18: v1.analyzer.KnoxNetworkSpec.NetworkSelector:type_name -> v1.analyzer.Selector
	14, // 19: v1.analyzer.KnoxNetworkSpec.Egressess:type_name -> v1.analyzer.Egress
	20, // 20: v1.analyzer.KnoxNetworkSpec.Ingressess:type_name -> v1.analyzer.Ingress
	26, // 21: v1.analyzer.Egress.MatchLabels:type_name -> v1.analyzer.Egress.MatchLabelsEntry
	15, // 22: v1.analyzer.Egress.ToPorts:type_name -> v1.analyzer.SpecPort
	16, // 23: v1.analyzer.Egress.ToCIDRs:type_name -> v1.analyzer.SpecCIDR
	17, // 24: v1.analyzer.Egress.ToServices:type_name -> v1.analyzer.SpecService
	18, // 25: v1.analyzer.Egress.ToFQDNs:type_name -> v1.analyzer.SpecFQDN
	19, // 26: v1.analyzer.Egress.ToHTTPs:type_name -> v1.analyzer.SpecHTTP
	27, // 27: v1.analyzer.Ingress.MatchLabels:type_name -> v1.analyzer.Ingress.MatchLabelsEntry
	15, // 28: v1.analyzer.Ingress.ToPorts:type_name -> v1.analyzer.SpecPort
	19, // 29: v1.analyzer.Ingress.ToHTTPs:type_name -> v1.analyzer.SpecHTTP
	16, // 30: v1.analyzer.Ingress.FromCIDRs:type_name -> v1.analyzer.SpecCIDR
	0,  // 31: v1.analyzer.Analyzer.GetNetworkPolicies:input_type -> v1.analyzer.NetworkLogs
	2,  // 32: v1.analyzer.Analyzer.GetSystemPolicies:input_type -> v1.analyzer.SystemLogs
	1,  // 33: v1.analyzer.Analyzer.GetNetworkPolicies:output_type -> v1.analyzer.NetworkPolicies
	3,  // 34: v1.analyzer.Analyzer.GetSystemPolicies:output_type -> v1.analyzer.SystemPolicies
	33, // [33:35] is the sub-list for method output_type
	31, // [31:33] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_v1_analyzer_analyzer_proto_init() }
func file_v1_analyzer_analyzer_proto_init() {
	if File_v1_analyzer_analyzer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_analyzer_analyzer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxSystemPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxSystemSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxSys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxMatchProtocols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxMatchPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxMatchDirectories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxFromSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxNetworkPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxNetworkSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Egress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecCIDR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecFQDN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecHTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxNetworkLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_analyzer_analyzer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnoxSystemLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_analyzer_analyzer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_analyzer_analyzer_proto_goTypes,
		DependencyIndexes: file_v1_analyzer_analyzer_proto_depIdxs,
		MessageInfos:      file_v1_analyzer_analyzer_proto_msgTypes,
	}.Build()
	File_v1_analyzer_analyzer_proto = out.File
	file_v1_analyzer_analyzer_proto_rawDesc = nil
	file_v1_analyzer_analyzer_proto_goTypes = nil
	file_v1_analyzer_analyzer_proto_depIdxs = nil
}
