// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: v1/analyzer/analyzer.proto

package analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Analyzer_GetNetworkPolicies_FullMethodName = "/v1.analyzer.Analyzer/GetNetworkPolicies"
	Analyzer_GetSystemPolicies_FullMethodName  = "/v1.analyzer.Analyzer/GetSystemPolicies"
)

// AnalyzerClient is the client API for Analyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyzerClient interface {
	GetNetworkPolicies(ctx context.Context, in *NetworkLogs, opts ...grpc.CallOption) (*NetworkPolicies, error)
	GetSystemPolicies(ctx context.Context, in *SystemLogs, opts ...grpc.CallOption) (*SystemPolicies, error)
}

type analyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzerClient(cc grpc.ClientConnInterface) AnalyzerClient {
	return &analyzerClient{cc}
}

func (c *analyzerClient) GetNetworkPolicies(ctx context.Context, in *NetworkLogs, opts ...grpc.CallOption) (*NetworkPolicies, error) {
	out := new(NetworkPolicies)
	err := c.cc.Invoke(ctx, Analyzer_GetNetworkPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzerClient) GetSystemPolicies(ctx context.Context, in *SystemLogs, opts ...grpc.CallOption) (*SystemPolicies, error) {
	out := new(SystemPolicies)
	err := c.cc.Invoke(ctx, Analyzer_GetSystemPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyzerServer is the server API for Analyzer service.
// All implementations must embed UnimplementedAnalyzerServer
// for forward compatibility
type AnalyzerServer interface {
	GetNetworkPolicies(context.Context, *NetworkLogs) (*NetworkPolicies, error)
	GetSystemPolicies(context.Context, *SystemLogs) (*SystemPolicies, error)
	mustEmbedUnimplementedAnalyzerServer()
}

// UnimplementedAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyzerServer struct {
}

func (UnimplementedAnalyzerServer) GetNetworkPolicies(context.Context, *NetworkLogs) (*NetworkPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkPolicies not implemented")
}
func (UnimplementedAnalyzerServer) GetSystemPolicies(context.Context, *SystemLogs) (*SystemPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemPolicies not implemented")
}
func (UnimplementedAnalyzerServer) mustEmbedUnimplementedAnalyzerServer() {}

// UnsafeAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzerServer will
// result in compilation errors.
type UnsafeAnalyzerServer interface {
	mustEmbedUnimplementedAnalyzerServer()
}

func RegisterAnalyzerServer(s grpc.ServiceRegistrar, srv AnalyzerServer) {
	s.RegisterService(&Analyzer_ServiceDesc, srv)
}

func _Analyzer_GetNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkLogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServer).GetNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyzer_GetNetworkPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServer).GetNetworkPolicies(ctx, req.(*NetworkLogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyzer_GetSystemPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServer).GetSystemPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyzer_GetSystemPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServer).GetSystemPolicies(ctx, req.(*SystemLogs))
	}
	return interceptor(ctx, in, info, handler)
}

// Analyzer_ServiceDesc is the grpc.ServiceDesc for Analyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.analyzer.Analyzer",
	HandlerType: (*AnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkPolicies",
			Handler:    _Analyzer_GetNetworkPolicies_Handler,
		},
		{
			MethodName: "GetSystemPolicies",
			Handler:    _Analyzer_GetSystemPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/analyzer/analyzer.proto",
}
