// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: v1/insight/insight.proto

package insight

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InsightClient is the client API for Insight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsightClient interface {
	GetInsightData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type insightClient struct {
	cc grpc.ClientConnInterface
}

func NewInsightClient(cc grpc.ClientConnInterface) InsightClient {
	return &insightClient{cc}
}

func (c *insightClient) GetInsightData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/v1.insight.Insight/GetInsightData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsightServer is the server API for Insight service.
// All implementations must embed UnimplementedInsightServer
// for forward compatibility
type InsightServer interface {
	GetInsightData(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedInsightServer()
}

// UnimplementedInsightServer must be embedded to have forward compatible implementations.
type UnimplementedInsightServer struct {
}

func (UnimplementedInsightServer) GetInsightData(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsightData not implemented")
}
func (UnimplementedInsightServer) mustEmbedUnimplementedInsightServer() {}

// UnsafeInsightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsightServer will
// result in compilation errors.
type UnsafeInsightServer interface {
	mustEmbedUnimplementedInsightServer()
}

func RegisterInsightServer(s grpc.ServiceRegistrar, srv InsightServer) {
	s.RegisterService(&Insight_ServiceDesc, srv)
}

func _Insight_GetInsightData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightServer).GetInsightData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.insight.Insight/GetInsightData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightServer).GetInsightData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Insight_ServiceDesc is the grpc.ServiceDesc for Insight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Insight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.insight.Insight",
	HandlerType: (*InsightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInsightData",
			Handler:    _Insight_GetInsightData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/insight/insight.proto",
}
