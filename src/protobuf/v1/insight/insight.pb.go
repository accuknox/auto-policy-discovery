// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: v1/insight/insight.proto

package insight

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Source  string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// common
	ClusterName   string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace     string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ContainerName string `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"`
	Labels        string `protobuf:"bytes,6,opt,name=labels,proto3" json:"labels,omitempty"`
	// system
	FromSource string `protobuf:"bytes,7,opt,name=fromSource,proto3" json:"fromSource,omitempty"`
	Duration   string `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// network
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Rule string `protobuf:"bytes,10,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *Request) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Request) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Request) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Request) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Request) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *Request) GetFromSource() string {
	if x != nil {
		return x.FromSource
	}
	return ""
}

func (x *Request) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Request) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Request) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

// Response
type InsightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName     string                `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	NameSpace       string                `protobuf:"bytes,2,opt,name=NameSpace,proto3" json:"NameSpace,omitempty"`
	Labels          string                `protobuf:"bytes,3,opt,name=Labels,proto3" json:"Labels,omitempty"`
	SystemResource  []*SystemInsightData  `protobuf:"bytes,4,rep,name=SystemResource,proto3" json:"SystemResource,omitempty"`
	NetworkResource []*NetworkInsightData `protobuf:"bytes,5,rep,name=NetworkResource,proto3" json:"NetworkResource,omitempty"`
}

func (x *InsightResponse) Reset() {
	*x = InsightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightResponse) ProtoMessage() {}

func (x *InsightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightResponse.ProtoReflect.Descriptor instead.
func (*InsightResponse) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{1}
}

func (x *InsightResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *InsightResponse) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

func (x *InsightResponse) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *InsightResponse) GetSystemResource() []*SystemInsightData {
	if x != nil {
		return x.SystemResource
	}
	return nil
}

func (x *InsightResponse) GetNetworkResource() []*NetworkInsightData {
	if x != nil {
		return x.NetworkResource
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []*InsightResponse `protobuf:"bytes,1,rep,name=Res,proto3" json:"Res,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetRes() []*InsightResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

// System
type SystemInsightData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string        `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	Namespace     string        `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Labels        string        `protobuf:"bytes,3,opt,name=Labels,proto3" json:"Labels,omitempty"`
	ContainerName string        `protobuf:"bytes,4,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	SysResource   []*SystemData `protobuf:"bytes,5,rep,name=SysResource,proto3" json:"SysResource,omitempty"`
}

func (x *SystemInsightData) Reset() {
	*x = SystemInsightData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInsightData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInsightData) ProtoMessage() {}

func (x *SystemInsightData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInsightData.ProtoReflect.Descriptor instead.
func (*SystemInsightData) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{3}
}

func (x *SystemInsightData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SystemInsightData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SystemInsightData) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *SystemInsightData) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *SystemInsightData) GetSysResource() []*SystemData {
	if x != nil {
		return x.SysResource
	}
	return nil
}

type SystemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromSource      string   `protobuf:"bytes,1,opt,name=fromSource,proto3" json:"fromSource,omitempty"`
	ProcessPaths    []string `protobuf:"bytes,2,rep,name=processPaths,proto3" json:"processPaths,omitempty"`
	FilePaths       []string `protobuf:"bytes,3,rep,name=filePaths,proto3" json:"filePaths,omitempty"`
	NetworkProtocol []string `protobuf:"bytes,4,rep,name=networkProtocol,proto3" json:"networkProtocol,omitempty"`
}

func (x *SystemData) Reset() {
	*x = SystemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemData) ProtoMessage() {}

func (x *SystemData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemData.ProtoReflect.Descriptor instead.
func (*SystemData) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{4}
}

func (x *SystemData) GetFromSource() string {
	if x != nil {
		return x.FromSource
	}
	return ""
}

func (x *SystemData) GetProcessPaths() []string {
	if x != nil {
		return x.ProcessPaths
	}
	return nil
}

func (x *SystemData) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *SystemData) GetNetworkProtocol() []string {
	if x != nil {
		return x.NetworkProtocol
	}
	return nil
}

// Network
type NetworkInsightData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string         `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	Namespace   string         `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Labels      string         `protobuf:"bytes,3,opt,name=Labels,proto3" json:"Labels,omitempty"`
	Type        string         `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Rule        string         `protobuf:"bytes,5,opt,name=Rule,proto3" json:"Rule,omitempty"`
	NetResource []*NetworkData `protobuf:"bytes,6,rep,name=NetResource,proto3" json:"NetResource,omitempty"`
}

func (x *NetworkInsightData) Reset() {
	*x = NetworkInsightData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInsightData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInsightData) ProtoMessage() {}

func (x *NetworkInsightData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInsightData.ProtoReflect.Descriptor instead.
func (*NetworkInsightData) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkInsightData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *NetworkInsightData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NetworkInsightData) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *NetworkInsightData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkInsightData) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *NetworkInsightData) GetNetResource() []*NetworkData {
	if x != nil {
		return x.NetResource
	}
	return nil
}

type NetworkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels     string     `protobuf:"bytes,1,opt,name=Labels,proto3" json:"Labels,omitempty"`
	Egressess  []*Egress  `protobuf:"bytes,2,rep,name=Egressess,proto3" json:"Egressess,omitempty"`
	Ingressess []*Ingress `protobuf:"bytes,3,rep,name=Ingressess,proto3" json:"Ingressess,omitempty"`
}

func (x *NetworkData) Reset() {
	*x = NetworkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkData) ProtoMessage() {}

func (x *NetworkData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkData.ProtoReflect.Descriptor instead.
func (*NetworkData) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkData) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *NetworkData) GetEgressess() []*Egress {
	if x != nil {
		return x.Egressess
	}
	return nil
}

func (x *NetworkData) GetIngressess() []*Ingress {
	if x != nil {
		return x.Ingressess
	}
	return nil
}

type Egress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToPorts     []*SpecPort       `protobuf:"bytes,2,rep,name=ToPorts,proto3" json:"ToPorts,omitempty"`
	ToCIDRs     []*SpecCIDR       `protobuf:"bytes,3,rep,name=ToCIDRs,proto3" json:"ToCIDRs,omitempty"`
	ToEndtities []string          `protobuf:"bytes,4,rep,name=ToEndtities,proto3" json:"ToEndtities,omitempty"`
	ToServices  []*SpecService    `protobuf:"bytes,5,rep,name=ToServices,proto3" json:"ToServices,omitempty"`
	ToFQDNs     []*SpecFQDN       `protobuf:"bytes,6,rep,name=ToFQDNs,proto3" json:"ToFQDNs,omitempty"`
	ToHTTPs     []*SpecHTTP       `protobuf:"bytes,7,rep,name=ToHTTPs,proto3" json:"ToHTTPs,omitempty"`
}

func (x *Egress) Reset() {
	*x = Egress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Egress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Egress) ProtoMessage() {}

func (x *Egress) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Egress.ProtoReflect.Descriptor instead.
func (*Egress) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{7}
}

func (x *Egress) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *Egress) GetToPorts() []*SpecPort {
	if x != nil {
		return x.ToPorts
	}
	return nil
}

func (x *Egress) GetToCIDRs() []*SpecCIDR {
	if x != nil {
		return x.ToCIDRs
	}
	return nil
}

func (x *Egress) GetToEndtities() []string {
	if x != nil {
		return x.ToEndtities
	}
	return nil
}

func (x *Egress) GetToServices() []*SpecService {
	if x != nil {
		return x.ToServices
	}
	return nil
}

func (x *Egress) GetToFQDNs() []*SpecFQDN {
	if x != nil {
		return x.ToFQDNs
	}
	return nil
}

func (x *Egress) GetToHTTPs() []*SpecHTTP {
	if x != nil {
		return x.ToHTTPs
	}
	return nil
}

type SpecPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     string `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
}

func (x *SpecPort) Reset() {
	*x = SpecPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecPort) ProtoMessage() {}

func (x *SpecPort) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecPort.ProtoReflect.Descriptor instead.
func (*SpecPort) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{8}
}

func (x *SpecPort) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SpecPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type SpecCIDR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CIDRs  []string `protobuf:"bytes,1,rep,name=CIDRs,proto3" json:"CIDRs,omitempty"`
	Except []string `protobuf:"bytes,2,rep,name=Except,proto3" json:"Except,omitempty"`
}

func (x *SpecCIDR) Reset() {
	*x = SpecCIDR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecCIDR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecCIDR) ProtoMessage() {}

func (x *SpecCIDR) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecCIDR.ProtoReflect.Descriptor instead.
func (*SpecCIDR) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{9}
}

func (x *SpecCIDR) GetCIDRs() []string {
	if x != nil {
		return x.CIDRs
	}
	return nil
}

func (x *SpecCIDR) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

type SpecService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *SpecService) Reset() {
	*x = SpecService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecService) ProtoMessage() {}

func (x *SpecService) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecService.ProtoReflect.Descriptor instead.
func (*SpecService) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{10}
}

func (x *SpecService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpecService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type SpecFQDN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchNames []string `protobuf:"bytes,1,rep,name=MatchNames,proto3" json:"MatchNames,omitempty"`
}

func (x *SpecFQDN) Reset() {
	*x = SpecFQDN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecFQDN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecFQDN) ProtoMessage() {}

func (x *SpecFQDN) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecFQDN.ProtoReflect.Descriptor instead.
func (*SpecFQDN) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{11}
}

func (x *SpecFQDN) GetMatchNames() []string {
	if x != nil {
		return x.MatchNames
	}
	return nil
}

type SpecHTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method     string `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Aggregated bool   `protobuf:"varint,3,opt,name=Aggregated,proto3" json:"Aggregated,omitempty"`
}

func (x *SpecHTTP) Reset() {
	*x = SpecHTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecHTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecHTTP) ProtoMessage() {}

func (x *SpecHTTP) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecHTTP.ProtoReflect.Descriptor instead.
func (*SpecHTTP) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{12}
}

func (x *SpecHTTP) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SpecHTTP) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SpecHTTP) GetAggregated() bool {
	if x != nil {
		return x.Aggregated
	}
	return false
}

type Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels  map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToPorts      []*SpecPort       `protobuf:"bytes,2,rep,name=ToPorts,proto3" json:"ToPorts,omitempty"`
	ToHTTPs      []*SpecHTTP       `protobuf:"bytes,3,rep,name=ToHTTPs,proto3" json:"ToHTTPs,omitempty"`
	FromCIDRs    []*SpecCIDR       `protobuf:"bytes,4,rep,name=FromCIDRs,proto3" json:"FromCIDRs,omitempty"`
	FromEntities []string          `protobuf:"bytes,5,rep,name=FromEntities,proto3" json:"FromEntities,omitempty"`
}

func (x *Ingress) Reset() {
	*x = Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_insight_insight_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingress) ProtoMessage() {}

func (x *Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_v1_insight_insight_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingress.ProtoReflect.Descriptor instead.
func (*Ingress) Descriptor() ([]byte, []int) {
	return file_v1_insight_insight_proto_rawDescGZIP(), []int{13}
}

func (x *Ingress) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *Ingress) GetToPorts() []*SpecPort {
	if x != nil {
		return x.ToPorts
	}
	return nil
}

func (x *Ingress) GetToHTTPs() []*SpecHTTP {
	if x != nil {
		return x.ToHTTPs
	}
	return nil
}

func (x *Ingress) GetFromCIDRs() []*SpecCIDR {
	if x != nil {
		return x.FromCIDRs
	}
	return nil
}

func (x *Ingress) GetFromEntities() []string {
	if x != nil {
		return x.FromEntities
	}
	return nil
}

var File_v1_insight_insight_proto protoreflect.FileDescriptor

var file_v1_insight_insight_proto_rawDesc = []byte{
	0x0a, 0x18, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x52, 0x65, 0x73, 0x22, 0xcb,
	0x01, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x53, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x4e, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x30, 0x0a, 0x09, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x03, 0x0a, 0x06, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x07, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x6f,
	0x43, 0x49, 0x44, 0x52, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x49, 0x44,
	0x52, 0x52, 0x07, 0x54, 0x6f, 0x43, 0x49, 0x44, 0x52, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x45, 0x6e, 0x64, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x6f, 0x46, 0x51, 0x44, 0x4e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x46, 0x51, 0x44, 0x4e, 0x52, 0x07, 0x54, 0x6f,
	0x46, 0x51, 0x44, 0x4e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x54, 0x54, 0x50, 0x52, 0x07, 0x54, 0x6f,
	0x48, 0x54, 0x54, 0x50, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x38, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x43, 0x49, 0x44, 0x52, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x49, 0x44, 0x52, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x49,
	0x44, 0x52, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x22, 0x4d, 0x0a, 0x0b, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x08, 0x53, 0x70,
	0x65, 0x63, 0x46, 0x51, 0x44, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x48, 0x54,
	0x54, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc9,
	0x02, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x54, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x54, 0x54, 0x50, 0x52, 0x07, 0x54, 0x6f, 0x48, 0x54, 0x54,
	0x50, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x49, 0x44, 0x52, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x49, 0x44, 0x52, 0x52, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x49, 0x44, 0x52, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x46, 0x0a, 0x07, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x63, 0x63, 0x75, 0x6b, 0x6e, 0x6f, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_insight_insight_proto_rawDescOnce sync.Once
	file_v1_insight_insight_proto_rawDescData = file_v1_insight_insight_proto_rawDesc
)

func file_v1_insight_insight_proto_rawDescGZIP() []byte {
	file_v1_insight_insight_proto_rawDescOnce.Do(func() {
		file_v1_insight_insight_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_insight_insight_proto_rawDescData)
	})
	return file_v1_insight_insight_proto_rawDescData
}

var file_v1_insight_insight_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_v1_insight_insight_proto_goTypes = []interface{}{
	(*Request)(nil),            // 0: v1.insight.Request
	(*InsightResponse)(nil),    // 1: v1.insight.InsightResponse
	(*Response)(nil),           // 2: v1.insight.Response
	(*SystemInsightData)(nil),  // 3: v1.insight.SystemInsightData
	(*SystemData)(nil),         // 4: v1.insight.SystemData
	(*NetworkInsightData)(nil), // 5: v1.insight.NetworkInsightData
	(*NetworkData)(nil),        // 6: v1.insight.NetworkData
	(*Egress)(nil),             // 7: v1.insight.Egress
	(*SpecPort)(nil),           // 8: v1.insight.SpecPort
	(*SpecCIDR)(nil),           // 9: v1.insight.SpecCIDR
	(*SpecService)(nil),        // 10: v1.insight.SpecService
	(*SpecFQDN)(nil),           // 11: v1.insight.SpecFQDN
	(*SpecHTTP)(nil),           // 12: v1.insight.SpecHTTP
	(*Ingress)(nil),            // 13: v1.insight.Ingress
	nil,                        // 14: v1.insight.Egress.MatchLabelsEntry
	nil,                        // 15: v1.insight.Ingress.MatchLabelsEntry
}
var file_v1_insight_insight_proto_depIdxs = []int32{
	3,  // 0: v1.insight.InsightResponse.SystemResource:type_name -> v1.insight.SystemInsightData
	5,  // 1: v1.insight.InsightResponse.NetworkResource:type_name -> v1.insight.NetworkInsightData
	1,  // 2: v1.insight.Response.Res:type_name -> v1.insight.InsightResponse
	4,  // 3: v1.insight.SystemInsightData.SysResource:type_name -> v1.insight.SystemData
	6,  // 4: v1.insight.NetworkInsightData.NetResource:type_name -> v1.insight.NetworkData
	7,  // 5: v1.insight.NetworkData.Egressess:type_name -> v1.insight.Egress
	13, // 6: v1.insight.NetworkData.Ingressess:type_name -> v1.insight.Ingress
	14, // 7: v1.insight.Egress.MatchLabels:type_name -> v1.insight.Egress.MatchLabelsEntry
	8,  // 8: v1.insight.Egress.ToPorts:type_name -> v1.insight.SpecPort
	9,  // 9: v1.insight.Egress.ToCIDRs:type_name -> v1.insight.SpecCIDR
	10, // 10: v1.insight.Egress.ToServices:type_name -> v1.insight.SpecService
	11, // 11: v1.insight.Egress.ToFQDNs:type_name -> v1.insight.SpecFQDN
	12, // 12: v1.insight.Egress.ToHTTPs:type_name -> v1.insight.SpecHTTP
	15, // 13: v1.insight.Ingress.MatchLabels:type_name -> v1.insight.Ingress.MatchLabelsEntry
	8,  // 14: v1.insight.Ingress.ToPorts:type_name -> v1.insight.SpecPort
	12, // 15: v1.insight.Ingress.ToHTTPs:type_name -> v1.insight.SpecHTTP
	9,  // 16: v1.insight.Ingress.FromCIDRs:type_name -> v1.insight.SpecCIDR
	0,  // 17: v1.insight.Insight.GetInsightData:input_type -> v1.insight.Request
	2,  // 18: v1.insight.Insight.GetInsightData:output_type -> v1.insight.Response
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v1_insight_insight_proto_init() }
func file_v1_insight_insight_proto_init() {
	if File_v1_insight_insight_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_insight_insight_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInsightData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInsightData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Egress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecCIDR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecFQDN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecHTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_insight_insight_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_insight_insight_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_insight_insight_proto_goTypes,
		DependencyIndexes: file_v1_insight_insight_proto_depIdxs,
		MessageInfos:      file_v1_insight_insight_proto_msgTypes,
	}.Build()
	File_v1_insight_insight_proto = out.File
	file_v1_insight_insight_proto_rawDesc = nil
	file_v1_insight_insight_proto_goTypes = nil
	file_v1_insight_insight_proto_depIdxs = nil
}
