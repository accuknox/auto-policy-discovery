// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: v1/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigName string  `protobuf:"bytes,1,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	Config     *Config `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *ConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string    `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Config []*Config `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ConfigResponse) GetConfig() []*Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbDriver              string `protobuf:"bytes,1,opt,name=db_driver,json=dbDriver,proto3" json:"db_driver,omitempty"`
	DbHost                string `protobuf:"bytes,2,opt,name=db_host,json=dbHost,proto3" json:"db_host,omitempty"`
	DbPort                string `protobuf:"bytes,3,opt,name=db_port,json=dbPort,proto3" json:"db_port,omitempty"`
	DbUser                string `protobuf:"bytes,4,opt,name=db_user,json=dbUser,proto3" json:"db_user,omitempty"`
	DbPass                string `protobuf:"bytes,5,opt,name=db_pass,json=dbPass,proto3" json:"db_pass,omitempty"`
	DbName                string `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TableAutoPolicyConfig string `protobuf:"bytes,7,opt,name=table_auto_policy_config,json=tableAutoPolicyConfig,proto3" json:"table_auto_policy_config,omitempty"`
}

func (x *ConfigDB) Reset() {
	*x = ConfigDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDB) ProtoMessage() {}

func (x *ConfigDB) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDB.ProtoReflect.Descriptor instead.
func (*ConfigDB) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigDB) GetDbDriver() string {
	if x != nil {
		return x.DbDriver
	}
	return ""
}

func (x *ConfigDB) GetDbHost() string {
	if x != nil {
		return x.DbHost
	}
	return ""
}

func (x *ConfigDB) GetDbPort() string {
	if x != nil {
		return x.DbPort
	}
	return ""
}

func (x *ConfigDB) GetDbUser() string {
	if x != nil {
		return x.DbUser
	}
	return ""
}

func (x *ConfigDB) GetDbPass() string {
	if x != nil {
		return x.DbPass
	}
	return ""
}

func (x *ConfigDB) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ConfigDB) GetTableAutoPolicyConfig() string {
	if x != nil {
		return x.TableAutoPolicyConfig
	}
	return ""
}

type ConfigCiliumHubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HubbleUrl  string `protobuf:"bytes,1,opt,name=hubble_url,json=hubbleUrl,proto3" json:"hubble_url,omitempty"`
	HubblePort string `protobuf:"bytes,2,opt,name=hubble_port,json=hubblePort,proto3" json:"hubble_port,omitempty"`
}

func (x *ConfigCiliumHubble) Reset() {
	*x = ConfigCiliumHubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigCiliumHubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigCiliumHubble) ProtoMessage() {}

func (x *ConfigCiliumHubble) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigCiliumHubble.ProtoReflect.Descriptor instead.
func (*ConfigCiliumHubble) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigCiliumHubble) GetHubbleUrl() string {
	if x != nil {
		return x.HubbleUrl
	}
	return ""
}

func (x *ConfigCiliumHubble) GetHubblePort() string {
	if x != nil {
		return x.HubblePort
	}
	return ""
}

type ConfigKubeArmorRelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubearmorUrl  string `protobuf:"bytes,1,opt,name=kubearmor_url,json=kubearmorUrl,proto3" json:"kubearmor_url,omitempty"`
	KubearmorPort string `protobuf:"bytes,2,opt,name=kubearmor_port,json=kubearmorPort,proto3" json:"kubearmor_port,omitempty"`
}

func (x *ConfigKubeArmorRelay) Reset() {
	*x = ConfigKubeArmorRelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigKubeArmorRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigKubeArmorRelay) ProtoMessage() {}

func (x *ConfigKubeArmorRelay) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigKubeArmorRelay.ProtoReflect.Descriptor instead.
func (*ConfigKubeArmorRelay) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigKubeArmorRelay) GetKubearmorUrl() string {
	if x != nil {
		return x.KubearmorUrl
	}
	return ""
}

func (x *ConfigKubeArmorRelay) GetKubearmorPort() string {
	if x != nil {
		return x.KubearmorPort
	}
	return ""
}

type NetworkLogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceNamespace      string   `protobuf:"bytes,1,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	SourceLabels         []string `protobuf:"bytes,2,rep,name=source_labels,json=sourceLabels,proto3" json:"source_labels,omitempty"`
	DestinationNamespace string   `protobuf:"bytes,3,opt,name=destination_namespace,json=destinationNamespace,proto3" json:"destination_namespace,omitempty"`
	DestinationLabels    []string `protobuf:"bytes,4,rep,name=destination_labels,json=destinationLabels,proto3" json:"destination_labels,omitempty"`
	Protocol             string   `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	PortNumber           string   `protobuf:"bytes,6,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
}

func (x *NetworkLogFilter) Reset() {
	*x = NetworkLogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLogFilter) ProtoMessage() {}

func (x *NetworkLogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLogFilter.ProtoReflect.Descriptor instead.
func (*NetworkLogFilter) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkLogFilter) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *NetworkLogFilter) GetSourceLabels() []string {
	if x != nil {
		return x.SourceLabels
	}
	return nil
}

func (x *NetworkLogFilter) GetDestinationNamespace() string {
	if x != nil {
		return x.DestinationNamespace
	}
	return ""
}

func (x *NetworkLogFilter) GetDestinationLabels() []string {
	if x != nil {
		return x.DestinationLabels
	}
	return nil
}

func (x *NetworkLogFilter) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetworkLogFilter) GetPortNumber() string {
	if x != nil {
		return x.PortNumber
	}
	return ""
}

type ConfigNetworkPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationMode           int32               `protobuf:"varint,1,opt,name=operation_mode,json=operationMode,proto3" json:"operation_mode,omitempty"`
	CronjobTimeInterval     string              `protobuf:"bytes,2,opt,name=cronjob_time_interval,json=cronjobTimeInterval,proto3" json:"cronjob_time_interval,omitempty"`
	OneTimeJobTimeSelection string              `protobuf:"bytes,3,opt,name=one_time_job_time_selection,json=oneTimeJobTimeSelection,proto3" json:"one_time_job_time_selection,omitempty"`
	NetworkLogFrom          string              `protobuf:"bytes,4,opt,name=network_log_from,json=networkLogFrom,proto3" json:"network_log_from,omitempty"`
	NetworkLogFile          string              `protobuf:"bytes,5,opt,name=network_log_file,json=networkLogFile,proto3" json:"network_log_file,omitempty"`
	NetworkPolicyTo         string              `protobuf:"bytes,6,opt,name=network_policy_to,json=networkPolicyTo,proto3" json:"network_policy_to,omitempty"`
	NetworkPolicyDir        string              `protobuf:"bytes,7,opt,name=network_policy_dir,json=networkPolicyDir,proto3" json:"network_policy_dir,omitempty"`
	NetworkPolicyTypes      int32               `protobuf:"varint,8,opt,name=network_policy_types,json=networkPolicyTypes,proto3" json:"network_policy_types,omitempty"`
	NetworkPolicyRuleTypes  int32               `protobuf:"varint,9,opt,name=network_policy_rule_types,json=networkPolicyRuleTypes,proto3" json:"network_policy_rule_types,omitempty"`
	NetworkPolicyCidrbits   int32               `protobuf:"varint,10,opt,name=network_policy_cidrbits,json=networkPolicyCidrbits,proto3" json:"network_policy_cidrbits,omitempty"`
	NetworkPolicyLogFilters []*NetworkLogFilter `protobuf:"bytes,11,rep,name=network_policy_log_filters,json=networkPolicyLogFilters,proto3" json:"network_policy_log_filters,omitempty"`
	NetworkPolicyL3Level    int32               `protobuf:"varint,12,opt,name=network_policy_l3_level,json=networkPolicyL3Level,proto3" json:"network_policy_l3_level,omitempty"`
	NetworkPolicyL4Level    int32               `protobuf:"varint,13,opt,name=network_policy_l4_level,json=networkPolicyL4Level,proto3" json:"network_policy_l4_level,omitempty"`
	NetworkPolicyL7Level    int32               `protobuf:"varint,14,opt,name=network_policy_l7_level,json=networkPolicyL7Level,proto3" json:"network_policy_l7_level,omitempty"`
}

func (x *ConfigNetworkPolicy) Reset() {
	*x = ConfigNetworkPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigNetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigNetworkPolicy) ProtoMessage() {}

func (x *ConfigNetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigNetworkPolicy.ProtoReflect.Descriptor instead.
func (*ConfigNetworkPolicy) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigNetworkPolicy) GetOperationMode() int32 {
	if x != nil {
		return x.OperationMode
	}
	return 0
}

func (x *ConfigNetworkPolicy) GetCronjobTimeInterval() string {
	if x != nil {
		return x.CronjobTimeInterval
	}
	return ""
}

func (x *ConfigNetworkPolicy) GetOneTimeJobTimeSelection() string {
	if x != nil {
		return x.OneTimeJobTimeSelection
	}
	return ""
}

func (x *ConfigNetworkPolicy) GetNetworkLogFrom() string {
	if x != nil {
		return x.NetworkLogFrom
	}
	return ""
}

func (x *ConfigNetworkPolicy) GetNetworkLogFile() string {
	if x != nil {
		return x.NetworkLogFile
	}
	return ""
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyTo() string {
	if x != nil {
		return x.NetworkPolicyTo
	}
	return ""
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyDir() string {
	if x != nil {
		return x.NetworkPolicyDir
	}
	return ""
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyTypes() int32 {
	if x != nil {
		return x.NetworkPolicyTypes
	}
	return 0
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyRuleTypes() int32 {
	if x != nil {
		return x.NetworkPolicyRuleTypes
	}
	return 0
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyCidrbits() int32 {
	if x != nil {
		return x.NetworkPolicyCidrbits
	}
	return 0
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyLogFilters() []*NetworkLogFilter {
	if x != nil {
		return x.NetworkPolicyLogFilters
	}
	return nil
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyL3Level() int32 {
	if x != nil {
		return x.NetworkPolicyL3Level
	}
	return 0
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyL4Level() int32 {
	if x != nil {
		return x.NetworkPolicyL4Level
	}
	return 0
}

func (x *ConfigNetworkPolicy) GetNetworkPolicyL7Level() int32 {
	if x != nil {
		return x.NetworkPolicyL7Level
	}
	return 0
}

type SystemLogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace      string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels         []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	FileFormats    []string `protobuf:"bytes,3,rep,name=file_formats,json=fileFormats,proto3" json:"file_formats,omitempty"`
	ProcessFormats []string `protobuf:"bytes,4,rep,name=process_formats,json=processFormats,proto3" json:"process_formats,omitempty"`
	FileDirs       []string `protobuf:"bytes,5,rep,name=file_dirs,json=fileDirs,proto3" json:"file_dirs,omitempty"`
	ProcessDirs    []string `protobuf:"bytes,6,rep,name=process_dirs,json=processDirs,proto3" json:"process_dirs,omitempty"`
}

func (x *SystemLogFilter) Reset() {
	*x = SystemLogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogFilter) ProtoMessage() {}

func (x *SystemLogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogFilter.ProtoReflect.Descriptor instead.
func (*SystemLogFilter) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *SystemLogFilter) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SystemLogFilter) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SystemLogFilter) GetFileFormats() []string {
	if x != nil {
		return x.FileFormats
	}
	return nil
}

func (x *SystemLogFilter) GetProcessFormats() []string {
	if x != nil {
		return x.ProcessFormats
	}
	return nil
}

func (x *SystemLogFilter) GetFileDirs() []string {
	if x != nil {
		return x.FileDirs
	}
	return nil
}

func (x *SystemLogFilter) GetProcessDirs() []string {
	if x != nil {
		return x.ProcessDirs
	}
	return nil
}

type ConfigSystemPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationMode              int32              `protobuf:"varint,1,opt,name=operation_mode,json=operationMode,proto3" json:"operation_mode,omitempty"`
	CronjobTimeInterval        string             `protobuf:"bytes,2,opt,name=cronjob_time_interval,json=cronjobTimeInterval,proto3" json:"cronjob_time_interval,omitempty"`
	OneTimeJobTimeSelection    string             `protobuf:"bytes,3,opt,name=one_time_job_time_selection,json=oneTimeJobTimeSelection,proto3" json:"one_time_job_time_selection,omitempty"`
	SystemLogFrom              string             `protobuf:"bytes,4,opt,name=system_log_from,json=systemLogFrom,proto3" json:"system_log_from,omitempty"`
	SystemLogFile              string             `protobuf:"bytes,5,opt,name=system_log_file,json=systemLogFile,proto3" json:"system_log_file,omitempty"`
	SystemPolicyTo             string             `protobuf:"bytes,6,opt,name=system_policy_to,json=systemPolicyTo,proto3" json:"system_policy_to,omitempty"`
	SystemPolicyDir            string             `protobuf:"bytes,7,opt,name=system_policy_dir,json=systemPolicyDir,proto3" json:"system_policy_dir,omitempty"`
	SystemPolicyLogFilters     []*SystemLogFilter `protobuf:"bytes,8,rep,name=system_policy_log_filters,json=systemPolicyLogFilters,proto3" json:"system_policy_log_filters,omitempty"`
	SystemPolicyProcFromsource bool               `protobuf:"varint,9,opt,name=system_policy_proc_fromsource,json=systemPolicyProcFromsource,proto3" json:"system_policy_proc_fromsource,omitempty"`
	SystemPolicyFileFromsource bool               `protobuf:"varint,10,opt,name=system_policy_file_fromsource,json=systemPolicyFileFromsource,proto3" json:"system_policy_file_fromsource,omitempty"`
}

func (x *ConfigSystemPolicy) Reset() {
	*x = ConfigSystemPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSystemPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSystemPolicy) ProtoMessage() {}

func (x *ConfigSystemPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSystemPolicy.ProtoReflect.Descriptor instead.
func (*ConfigSystemPolicy) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigSystemPolicy) GetOperationMode() int32 {
	if x != nil {
		return x.OperationMode
	}
	return 0
}

func (x *ConfigSystemPolicy) GetCronjobTimeInterval() string {
	if x != nil {
		return x.CronjobTimeInterval
	}
	return ""
}

func (x *ConfigSystemPolicy) GetOneTimeJobTimeSelection() string {
	if x != nil {
		return x.OneTimeJobTimeSelection
	}
	return ""
}

func (x *ConfigSystemPolicy) GetSystemLogFrom() string {
	if x != nil {
		return x.SystemLogFrom
	}
	return ""
}

func (x *ConfigSystemPolicy) GetSystemLogFile() string {
	if x != nil {
		return x.SystemLogFile
	}
	return ""
}

func (x *ConfigSystemPolicy) GetSystemPolicyTo() string {
	if x != nil {
		return x.SystemPolicyTo
	}
	return ""
}

func (x *ConfigSystemPolicy) GetSystemPolicyDir() string {
	if x != nil {
		return x.SystemPolicyDir
	}
	return ""
}

func (x *ConfigSystemPolicy) GetSystemPolicyLogFilters() []*SystemLogFilter {
	if x != nil {
		return x.SystemPolicyLogFilters
	}
	return nil
}

func (x *ConfigSystemPolicy) GetSystemPolicyProcFromsource() bool {
	if x != nil {
		return x.SystemPolicyProcFromsource
	}
	return false
}

func (x *ConfigSystemPolicy) GetSystemPolicyFileFromsource() bool {
	if x != nil {
		return x.SystemPolicyFileFromsource
	}
	return false
}

type ConfigClusterMgmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterInfoFrom string `protobuf:"bytes,1,opt,name=cluster_info_from,json=clusterInfoFrom,proto3" json:"cluster_info_from,omitempty"`
	ClusterMgmtUrl  string `protobuf:"bytes,2,opt,name=cluster_mgmt_url,json=clusterMgmtUrl,proto3" json:"cluster_mgmt_url,omitempty"`
}

func (x *ConfigClusterMgmt) Reset() {
	*x = ConfigClusterMgmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigClusterMgmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigClusterMgmt) ProtoMessage() {}

func (x *ConfigClusterMgmt) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigClusterMgmt.ProtoReflect.Descriptor instead.
func (*ConfigClusterMgmt) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigClusterMgmt) GetClusterInfoFrom() string {
	if x != nil {
		return x.ClusterInfoFrom
	}
	return ""
}

func (x *ConfigClusterMgmt) GetClusterMgmtUrl() string {
	if x != nil {
		return x.ClusterMgmtUrl
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigName           string                `protobuf:"bytes,1,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	Status               int32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ConfigDb             *ConfigDB             `protobuf:"bytes,3,opt,name=config_db,json=configDb,proto3" json:"config_db,omitempty"`
	ConfigCiliumHubble   *ConfigCiliumHubble   `protobuf:"bytes,4,opt,name=config_cilium_hubble,json=configCiliumHubble,proto3" json:"config_cilium_hubble,omitempty"`
	ConfigNetworkPolicy  *ConfigNetworkPolicy  `protobuf:"bytes,5,opt,name=config_network_policy,json=configNetworkPolicy,proto3" json:"config_network_policy,omitempty"`
	ConfigSystemPolicy   *ConfigSystemPolicy   `protobuf:"bytes,6,opt,name=config_system_policy,json=configSystemPolicy,proto3" json:"config_system_policy,omitempty"`
	ConfigClusterMgmt    *ConfigClusterMgmt    `protobuf:"bytes,7,opt,name=config_cluster_mgmt,json=configClusterMgmt,proto3" json:"config_cluster_mgmt,omitempty"`
	ConfigKubearmorRelay *ConfigKubeArmorRelay `protobuf:"bytes,8,opt,name=config_kubearmor_relay,json=configKubearmorRelay,proto3" json:"config_kubearmor_relay,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *Config) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *Config) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Config) GetConfigDb() *ConfigDB {
	if x != nil {
		return x.ConfigDb
	}
	return nil
}

func (x *Config) GetConfigCiliumHubble() *ConfigCiliumHubble {
	if x != nil {
		return x.ConfigCiliumHubble
	}
	return nil
}

func (x *Config) GetConfigNetworkPolicy() *ConfigNetworkPolicy {
	if x != nil {
		return x.ConfigNetworkPolicy
	}
	return nil
}

func (x *Config) GetConfigSystemPolicy() *ConfigSystemPolicy {
	if x != nil {
		return x.ConfigSystemPolicy
	}
	return nil
}

func (x *Config) GetConfigClusterMgmt() *ConfigClusterMgmt {
	if x != nil {
		return x.ConfigClusterMgmt
	}
	return nil
}

func (x *Config) GetConfigKubearmorRelay() *ConfigKubeArmorRelay {
	if x != nil {
		return x.ConfigKubearmorRelay
	}
	return nil
}

var File_v1_config_config_proto protoreflect.FileDescriptor

var file_v1_config_config_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xdd, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x62, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x62, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x50, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x54, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x48,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b,
	0x75, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x10, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x33,
	0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x80, 0x06, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x6f,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x69, 0x64, 0x72, 0x62,
	0x69, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6c, 0x33, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x33, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6c, 0x34, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4c, 0x34, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6c, 0x37,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x37, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x72, 0x73, 0x22, 0xb0, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f,
	0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x72, 0x12, 0x55,
	0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x46, 0x72,
	0x6f, 0x6d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x67, 0x6d, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x8e, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x42, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x62, 0x12, 0x4f, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x68, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x69, 0x6c,
	0x69, 0x75, 0x6d, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74,
	0x12, 0x55, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x32, 0xc1, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x75, 0x6b, 0x6e,
	0x6f, 0x78, 0x2f, 0x6b, 0x6e, 0x6f, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_config_config_proto_rawDescOnce sync.Once
	file_v1_config_config_proto_rawDescData = file_v1_config_config_proto_rawDesc
)

func file_v1_config_config_proto_rawDescGZIP() []byte {
	file_v1_config_config_proto_rawDescOnce.Do(func() {
		file_v1_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_config_config_proto_rawDescData)
	})
	return file_v1_config_config_proto_rawDescData
}

var file_v1_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_v1_config_config_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),        // 0: v1.config.ConfigRequest
	(*ConfigResponse)(nil),       // 1: v1.config.ConfigResponse
	(*ConfigDB)(nil),             // 2: v1.config.ConfigDB
	(*ConfigCiliumHubble)(nil),   // 3: v1.config.ConfigCiliumHubble
	(*ConfigKubeArmorRelay)(nil), // 4: v1.config.ConfigKubeArmorRelay
	(*NetworkLogFilter)(nil),     // 5: v1.config.NetworkLogFilter
	(*ConfigNetworkPolicy)(nil),  // 6: v1.config.ConfigNetworkPolicy
	(*SystemLogFilter)(nil),      // 7: v1.config.SystemLogFilter
	(*ConfigSystemPolicy)(nil),   // 8: v1.config.ConfigSystemPolicy
	(*ConfigClusterMgmt)(nil),    // 9: v1.config.ConfigClusterMgmt
	(*Config)(nil),               // 10: v1.config.Config
}
var file_v1_config_config_proto_depIdxs = []int32{
	10, // 0: v1.config.ConfigRequest.config:type_name -> v1.config.Config
	10, // 1: v1.config.ConfigResponse.config:type_name -> v1.config.Config
	5,  // 2: v1.config.ConfigNetworkPolicy.network_policy_log_filters:type_name -> v1.config.NetworkLogFilter
	7,  // 3: v1.config.ConfigSystemPolicy.system_policy_log_filters:type_name -> v1.config.SystemLogFilter
	2,  // 4: v1.config.Config.config_db:type_name -> v1.config.ConfigDB
	3,  // 5: v1.config.Config.config_cilium_hubble:type_name -> v1.config.ConfigCiliumHubble
	6,  // 6: v1.config.Config.config_network_policy:type_name -> v1.config.ConfigNetworkPolicy
	8,  // 7: v1.config.Config.config_system_policy:type_name -> v1.config.ConfigSystemPolicy
	9,  // 8: v1.config.Config.config_cluster_mgmt:type_name -> v1.config.ConfigClusterMgmt
	4,  // 9: v1.config.Config.config_kubearmor_relay:type_name -> v1.config.ConfigKubeArmorRelay
	0,  // 10: v1.config.ConfigStore.Add:input_type -> v1.config.ConfigRequest
	0,  // 11: v1.config.ConfigStore.Get:input_type -> v1.config.ConfigRequest
	0,  // 12: v1.config.ConfigStore.Update:input_type -> v1.config.ConfigRequest
	0,  // 13: v1.config.ConfigStore.Delete:input_type -> v1.config.ConfigRequest
	0,  // 14: v1.config.ConfigStore.Apply:input_type -> v1.config.ConfigRequest
	1,  // 15: v1.config.ConfigStore.Add:output_type -> v1.config.ConfigResponse
	1,  // 16: v1.config.ConfigStore.Get:output_type -> v1.config.ConfigResponse
	1,  // 17: v1.config.ConfigStore.Update:output_type -> v1.config.ConfigResponse
	1,  // 18: v1.config.ConfigStore.Delete:output_type -> v1.config.ConfigResponse
	1,  // 19: v1.config.ConfigStore.Apply:output_type -> v1.config.ConfigResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_v1_config_config_proto_init() }
func file_v1_config_config_proto_init() {
	if File_v1_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigCiliumHubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigKubeArmorRelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigNetworkPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSystemPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigClusterMgmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_config_config_proto_goTypes,
		DependencyIndexes: file_v1_config_config_proto_depIdxs,
		MessageInfos:      file_v1_config_config_proto_msgTypes,
	}.Build()
	File_v1_config_config_proto = out.File
	file_v1_config_config_proto_rawDesc = nil
	file_v1_config_config_proto_goTypes = nil
	file_v1_config_config_proto_depIdxs = nil
}
